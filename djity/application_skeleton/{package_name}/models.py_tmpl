"""
Models for Djity application {application_name}
"""

from django.db import models

from djity.project.models import Module
from djity.utils.inherit import SuperManager
from djity.utils import djreverse
from djity.utils.security import sanitize
from djity.portlet.models import TemplatePortlet, TextPortlet
from transmeta import TransMeta

class {class_name}(Module):
    """
    Main class of this new Djity application. This class acts like a proxy between
    your application and Djity, allowing Djity to manage its modules in a
    standard way.

    At creation, this application simply displays a message in a tab.
    """
    #get the module manager
    objects = SuperManager()

    #use transmeta for international message
    __metaclass__ = TransMeta
    
    message = models.CharField(max_length=200, default='Hello World !')

    class Meta:
        #specify that the field 'message' is translatable
        translate = ('message',)
        

    def save(self,*args,**kwargs):
        """
        Redefine save() from Module in order to attach portlets at creation.
        """
        # Is the module new ?
        new = (self.id == None)

        super({class_name},self).save(*args, **kwargs)

        if new:
            #A standard text portlet, its content will be automatically editable
            TextPortlet(content=sanitize("This is a tab level text portlet edit me !"), container=self,position="left", rel_position=0).save()

            # A standard template portlet, it will simply render a template
            TemplatePortlet(template="{package_name}/{module_name}_portlet.html",container=self,position="right",rel_position=0).save()

            # A custom template defined in models.py of the application
            {class_name}Portlet(container=self,position="right",rel_position=0).save()
    

    def djity_url(self,context):
        """
        return the application's start page
        """
        return djreverse('{module_name}-main',context)

class {class_name}Portlet(TemplatePortlet):
    def save(self,*args,**kwargs):
        # Is the portlet new ?
        new = (self.id == None)

        super({class_name}Portlet,self).save(*args, **kwargs)
        
        if new:    
            self.onload = "$('.{module_name}-load-portlet').{module_name}_widget();" 
            self.template = "{package_name}/{module_name}_portlet2.html"
            super({class_name}Portlet,self).save(*args, **kwargs)

